package my.com.infopro.mobile.client.utils;

import java.util.Date;

import com.google.gwt.i18n.shared.DateTimeFormat;
import com.google.gwt.user.client.Random;
import com.googlecode.cryptogwt.emul.java.security.MessageDigest;
import com.googlecode.cryptogwt.emul.java.security.NoSuchAlgorithmException;

public class HMACDigestHelper {

	private Object realmName;
	private String username;
	private String password;
	private Object httpMethod;
	private int nc;
	private Object path;

	/**
	 * The Authorization header Once the response hash is calculated, the app
	 * can build the Authorization HTTP header that must be used tosend the
	 * authenticated HTTP request. The Authorization header must be prefixed by
	 * the "Digest" string, and is built up of the following pieces: username:
	 * the username supplied by the user realm: same value sent by the server
	 * nonce: same value sent by the server uri: the URI that the client is
	 * accessing \ opaque: same value sent by the server qop: same value sent by
	 * the server nc: a hex number that must be increased by the client for each
	 * request cnonce: a random string generated by the client response: the
	 * hash computed by the client starting from the WWW-Authenticate header
	 * sent by the server
	 * 
	 * @param nonce
	 * @param qop
	 * @param opaque
	 * @return authorizationHeader
	 */
	protected String createAuthorizationHeader(String nonce, String qop,
			String pwAlgorithm) {
		Date today = new Date();
		String DATE_FORMAT = "EEE, d MMM yyyy HH:mm:ss z";
		String currentDate =DateTimeFormat.getFormat(DATE_FORMAT).format(today);
		String encpassword=null;
		try {
			if(pwAlgorithm.equalsIgnoreCase("SHA-1")){
				
				encpassword=calculateSHA1(password);
				
			}else if(pwAlgorithm.equalsIgnoreCase("MD5")){
				encpassword=calculateMD5(password);
			}
		} catch (NoSuchAlgorithmException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		String ha1 = new String(DigestUtils.md5Hex(username + ":" + realmName
				+ ":" + encpassword));
		String ha2 = DigestUtils.md5Hex(httpMethod.toString() + ":" + path);

		String cnonce = Integer.toString(Math.abs(Random.nextInt()));
		String ncvalue = Integer.toHexString(nc++);
	
		StringBuffer digest = new StringBuffer();
		digest.append(ha1).append(":").append(nonce).append(":")
				.append(ncvalue).append(":").append(cnonce).append(":");
		digest.append(qop).append(":").append(ha2);

		String response = DigestUtils.md5Hex(digest.toString());

		StringBuffer authorizationHeader = new StringBuffer();
		authorizationHeader.append("Digest username=\"").append(username)
				.append("\"+ , realm=\"");
		authorizationHeader.append(realmName).append("\", cnonce=\"")
				.append(cnonce).append("\",");
		authorizationHeader.append("\", snonce=\"").append(nonce)
				.append(" uri=\"").append(path);
		
		authorizationHeader.append("\", created=").append(currentDate)
				.append(", response=\"").append(response);
//		authorizationHeader.append("\", qop=").append(qop)
//				.append(", opaque=\"").append(opaque).append("\"");

		return authorizationHeader.toString();

	}
	public static String calculateMD5(String contentToEncode) throws NoSuchAlgorithmException {
		MessageDigest digest = MessageDigest.getInstance("MD5");
		digest.update(contentToEncode.getBytes());
		String result = new String(Base64.encode(digest.digest().toString()));
		return result;
	}
	public static String calculateSHA1(String contentToEncode) throws NoSuchAlgorithmException {
		MessageDigest digest = MessageDigest.getInstance("SHA-1");
		digest.update(contentToEncode.getBytes());
		String result = new String(Base64.encode(digest.digest().toString()));
		return result;
	}
}
