/*
    This file is part of Cyclos (www.cyclos.org).
    A project of the Social Trade Organisation (www.socialtrade.org).

    Cyclos is free software; you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation; either version 2 of the License, or
    (at your option) any later version.

    Cyclos is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with Cyclos; if not, write to the Free Software
    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA

 */
package my.com.infopro.mobile.client.utils.conversion;

import java.math.BigDecimal;
import java.math.BigInteger;
import java.math.RoundingMode;
import java.text.DecimalFormat;
import java.text.DecimalFormatSymbols;
import java.util.Calendar;
import java.util.Collection;
import java.util.Date;
import java.util.GregorianCalendar;
import java.util.Iterator;
import java.util.Locale;

import my.com.infopro.mobile.client.utils.IntValuedEnum;
import my.com.infopro.mobile.client.utils.StringValuedEnum;

import org.apache.commons.beanutils.ConstructorUtils;
import org.apache.commons.collections.IteratorUtils;
import org.apache.commons.lang3.ClassUtils;
import org.apache.commons.lang3.StringUtils;

/**
 * Converter for formatted numbers
 * @author luis
 */
public class NumberConverter<T extends Number> implements Converter<T>, Cloneable {

	private static final long   serialVersionUID = -473661346133459797L;
	private final DecimalFormat numberFormat;
	private final Class<T>      numberType;
	private boolean             negativeToAbsoluteValue;
	private volatile BigDecimal delta;

	public NumberConverter(final Class<T> numberType, final DecimalFormat numberFormat) {
		this.numberType = numberType;
		this.numberFormat = numberFormat;
	}

	public DecimalFormat getNumberFormat() {
		return numberFormat;
	}

	public Class<T> getNumberType() {
		return numberType;
	}

	@SuppressWarnings("unchecked")
	public NumberConverter<T> negativeToAbsolute() {
		try {
			final NumberConverter<T> clone = (NumberConverter<T>) clone();
			clone.negativeToAbsoluteValue = true;
			return clone;
		} catch (final CloneNotSupportedException e) {
			return null;
		}
	}

	@Override
	public String toString(final T number) {
		if (number == null) {
			return null;
		}
		BigDecimal bigDecimal = coerce(BigDecimal.class, number);

		// Convert to negative if on negativeToAbsoluteValue mode and number is not zero
		if (negativeToAbsoluteValue) {
			bigDecimal = bigDecimal.abs();
		}

		// For very small negative numbers, like 0.000001, avoid formatting as -0,00
		final BigDecimal delta = getDelta();
		if (bigDecimal.compareTo(BigDecimal.ZERO) < 0 && bigDecimal.compareTo(delta) > 0) {
			bigDecimal = BigDecimal.ZERO;
		}

		return numberFormat.format(bigDecimal);
	}
	public static <T> T coerce(final Class<T> toType, final Object value) {
		try {
			return (T) convert(toType, value);
		} catch (final ConversionException e) {
			throw e;
		} catch (final Exception e) {
			throw new ConversionException("Cannot convert " + value + " to " + toType.getName(), e);
		}
	}
	private static Object convert(Class toType1, Object value1) {
		Class toType = toType1;
		Object value = value1;
		if ("".equals(value)) {
			value = null;
		}
		// If we do not want a collection, but the value is one, use the first value
		if (value != null && !(Collection.class.isAssignableFrom(toType) || toType.isArray()) && (value.getClass().isArray() || value instanceof Collection)) {
			final Iterator it = IteratorUtils.getIterator(value);
			if (!it.hasNext()) {
				value = null;
			} else {
				value = it.next();
			}
		}

		// Check for null values
		if (value == null) {
			if (toType.isPrimitive()) {
				// On primitives, use the default value
				if (toType == Boolean.TYPE) {
					value = Boolean.FALSE;
				} else if (toType == Character.TYPE) {
					value = '\0';
				} else {
					value = 0;
				}
			} else {
				// For objects, return null
				return null;
			}
		}

		// Check if the value is already of the expected type
		if (toType.isInstance(value)) {
			return value;
		}

		// If the class is primitive, use the wrapper, so we have an easier work of testing instances
		if (toType.isPrimitive()) {
			toType = ClassUtils.primitiveToWrapper(toType);
		}

		// Convert to well-known types
		if (String.class.isAssignableFrom(toType)) {
			
			return value.toString();
		} else if (Number.class.isAssignableFrom(toType)) {
			if (!(value instanceof Number)) {
				if (value instanceof String) {
					value = new BigDecimal((String) value);
				} else if (value instanceof Date) {
					value = ((Date) value).getTime();
				} else if (value instanceof Calendar) {
					value = ((Calendar) value).getTimeInMillis();
				} else {
					throw new ConversionException("Invalid number: " + value);
				}
			}
			final Number number = (Number) value;
			if (Byte.class.isAssignableFrom(toType)) {
				return number.byteValue();
			} else if (Short.class.isAssignableFrom(toType)) {
				return number.shortValue();
			} else if (Integer.class.isAssignableFrom(toType)) {
				return number.intValue();
			} else if (Long.class.isAssignableFrom(toType)) {
				return number.longValue();
			} else if (Float.class.isAssignableFrom(toType)) {
				return number.floatValue();
			} else if (Double.class.isAssignableFrom(toType)) {
				return number.doubleValue();
			} else if (BigInteger.class.isAssignableFrom(toType)) {
				return new BigInteger(number.toString());
			} else if (BigDecimal.class.isAssignableFrom(toType)) {
				return new BigDecimal(number.toString());
			}
		} else if (Boolean.class.isAssignableFrom(toType)) {
			if (value instanceof Number) {
				return ((Number) value).intValue() != 0;
			} else if ("on".equalsIgnoreCase(value.toString())) {
				return true;
			} else {
				return Boolean.parseBoolean(value.toString());
			}
		} else if (Character.class.isAssignableFrom(toType)) {
			final String str = value.toString();
			return (str.length() == 0) ? null : str.charAt(0);
		} else if (Calendar.class.isAssignableFrom(toType)) {
			if (value instanceof Date) {
				final Calendar cal = new GregorianCalendar();
				cal.setTime((Date) value);
				return cal;
			}
		} else if (Date.class.isAssignableFrom(toType)) {
			if (value instanceof Calendar) {
				final long millis = ((Calendar) value).getTimeInMillis();
				try {
					return ConstructorUtils.invokeConstructor(toType, millis);
				} catch (final Exception e) {
					throw new IllegalStateException(e);
				}
			}
		} else if (Enum.class.isAssignableFrom(toType)) {
			Object ret;
			try {
				ret = Enum.valueOf(toType, value.toString());
			} catch (final Exception e) {
				ret = null;
			}
			if (ret == null) {
				Object[] possible;
				try {
					possible = (Object[]) toType.getMethod("values").invoke(null);
				} catch (final Exception e) {
					throw new IllegalStateException("Couldn't invoke the 'values' method for enum " + toType.getName());
				}
				if (StringValuedEnum.class.isAssignableFrom(toType)) {
					final String test = coerce(String.class, value);
					for (final Object item : possible) {
						if (((StringValuedEnum) item).getValue().equals(test)) {
							ret = item;
							break;
						}
					}
				} else if (IntValuedEnum.class.isAssignableFrom(toType)) {
					final int test = coerce(Integer.TYPE, value);
					for (final Object item : possible) {
						if (((IntValuedEnum) item).getValue() == test) {
							ret = item;
							break;
						}
					}
				} else {
					throw new ConversionException("Invalid enum: " + value);
				}
			}
			return ret;
		}  else if (Locale.class.isAssignableFrom(toType)) {
			return LocaleConverter.instance().valueOf(value.toString());
		}  

		// We don't know how to convert the value
		throw new ConversionException("Cannot coerce value to: " + toType.getName());
	}
	@Override
	public T valueOf(String string1) {
		String string = string1;
		if (StringUtils.isEmpty(string)) {
			return null;
		}
		final DecimalFormatSymbols symbols = numberFormat.getDecimalFormatSymbols();
		final char minusSign = symbols.getMinusSign();
		final char decimalSeparator = symbols.getDecimalSeparator();
		final char groupingSeparator = symbols.getGroupingSeparator();
		boolean negativeNumber = false;
		if (string.indexOf(minusSign) > -1) {
			string = StringUtils.replace(string, String.valueOf(minusSign), "");
			negativeNumber = true;
		}
		final String[] parts = StringUtils.split(string, String.valueOf(decimalSeparator));
		final String integerPart = StringUtils.replace(parts[0], String.valueOf(groupingSeparator), "");
		final boolean hasDecimalPart = parts.length > 1;
		final String decimalPart = hasDecimalPart ? parts[1] : "";
		String bigDecimalString = integerPart;
		if (hasDecimalPart) {
			bigDecimalString = bigDecimalString + "." + decimalPart;
		}
		if (negativeNumber) {
			bigDecimalString = "-" + bigDecimalString;
		}
		final BigDecimal bigDecimal = new BigDecimal(bigDecimalString);
		T value = coerce(numberType, bigDecimal);
		if (negativeToAbsoluteValue && value != null && value.floatValue() < 0) {
			value = coerce(numberType, -value.floatValue());
		}
		return value;
	}

	private BigDecimal getDelta() {
		if (delta == null) {
			final int precision = numberFormat.getMaximumFractionDigits();
			delta = BigDecimal.ONE.divide(BigDecimal.TEN.pow(precision), precision, RoundingMode.HALF_UP).negate();
		}
		return delta;
	}

}
