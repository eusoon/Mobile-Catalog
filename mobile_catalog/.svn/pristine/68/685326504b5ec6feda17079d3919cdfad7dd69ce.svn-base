package my.com.infopro.mobile.client.ui.widgets.menu;

import com.google.gwt.core.client.Scheduler;
import com.google.gwt.core.client.Scheduler.ScheduledCommand;
import com.google.gwt.core.shared.GWT;
import com.google.gwt.event.logical.shared.CloseEvent;
import com.google.gwt.event.logical.shared.CloseHandler;
import com.google.gwt.event.logical.shared.HasCloseHandlers;
import com.google.gwt.event.logical.shared.HasOpenHandlers;
import com.google.gwt.event.logical.shared.OpenEvent;
import com.google.gwt.event.logical.shared.OpenHandler;
import com.google.gwt.event.shared.HandlerRegistration;
import com.google.gwt.uibinder.client.UiField;
import com.google.gwt.user.client.ui.Composite;
import com.google.gwt.user.client.ui.FlowPanel;
import com.google.gwt.user.client.ui.SimplePanel;
import com.google.gwt.user.client.ui.Widget;

public class SwipeMenu extends Composite implements HasOpenHandlers<SwipeMenu>,
HasCloseHandlers<SwipeMenu>{
	
	private static final SwipeMenuAppearance APPEARANCE = GWT.create(SwipeMenuAppearance.class);

	 protected static final int THRESHOLD = 40;

	  @UiField
	  protected FlowPanel main;
	  @UiField
	  protected SimplePanel menu;
	  @UiField
	  protected SimplePanel content;
	  @UiField
	  protected FlowPanel wrap;

	  @UiField(provided = true)
	  protected final SwipeMenuAppearance appearance;

	  private enum STATE {
	    OPEN, CLOSED, ANIMATING_TO_CLOSE, SWIPING_TO_OPEN, SWIPING_TO_CLOSE, ANIMATING_TO_OPEN
	  }
	  private STATE state;

	  public SwipeMenu() {
	    this(APPEARANCE, /*allowSwipe*/ true);
	  }
	  
	  public SwipeMenu(boolean allowSwipe) {
	    this(APPEARANCE, allowSwipe);
	  }

	  public SwipeMenu(SwipeMenuAppearance appearance) {
	    this(appearance, /*allowSwipe*/ true);
	  }
	  
	  public SwipeMenu(SwipeMenuAppearance appearance, boolean allowSwipe) {

	    this.appearance = appearance;
	    state = STATE.CLOSED;

	    initWidget(appearance.uiBinder().createAndBindUi(this));

	  }
	  @Override
	  public HandlerRegistration addOpenHandler(OpenHandler<SwipeMenu> handler) {
	    return addHandler(handler, OpenEvent.getType());
	  }

	  @Override
	  public HandlerRegistration addCloseHandler(CloseHandler<SwipeMenu> handler) {
	    return addHandler(handler, CloseEvent.getType());
	  }

	  public void setMenuDisplay(Widget w) {
	    menu.setWidget(w);
	  }

	  public void setContentDisplay(Widget w) {
	    content.setWidget(w);
	  }

	 
	 

	  
}
