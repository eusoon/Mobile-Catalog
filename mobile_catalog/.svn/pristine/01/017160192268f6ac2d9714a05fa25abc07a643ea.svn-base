package my.com.infopro.ifx.element;

import my.com.infopro.ifx.basetypes.IFXObject;

public class RemitInfo extends IFXObject {
	RemitRefIdent remitRefIdent;	 //	NC-36	 Optional	 Remittance reference identifier. Remittance reference identifier generated for the payment, generally in the Accounts Payable system. Remit reference identifier links a payment and a remittance, and is used to re-join the two information streams when remittance and payment travel separately.
	PmtRefIdent pmtRefIdent;	 //	NC-36	 Optional	 Payment reference identifier. The Payee payment reference number generated by the payer associated with the payment, generally in the Accounts Payable system.
	RemitDeliveryRespParty remitDeliveryRespParty;	 //	Open Enum	 Optional	 Remittance Delivery Responsible Party; specifies the psarty to generate the remittance if the payment and the remittance are to be separated.
	DeliveryInstruction deliveryInstruction;	 //	Aggregate	 Optional	 Delivery Instruction
	PmtInstruction pmtInstruction;	 //	Aggregate	 Optional	 Details of how the payment was executed; included in remittance in case it is delivered separately from the payment and this information needs to be communicated.
	ChkData chkData;	 //	Aggregate	 Optional	 Check information.
	ChkImageURL chkImageURL;	 //	URL	 Optional	 URL location to obtain an image of the check.
	CustPayeeRef custPayeeRef;	 //	Aggregate	 Optional	 Reference to a defined Cust Payee if one exists.
	RemitDetail[] remitDetail;	 //	Aggregate	 Required Repeating	 Remittance detail information, i.e. information about bills/invoices that are being paid. At least one occurrence is required.
	PmtRef pmtRef;	 //	Aggregate	 Optional	 Payment Identifier. The identifier of the payment associated with this remittance. This is included to enable the BPP to inform the CPP of payment posting against this remittance.
	RefData[] refData;	 //	Aggregate	 Optional Repeating	 Reference information associated with a payment information generated by the payment application.
	CurAmt curAmt;	 //	Aggregate	 Optional	 Currency Amount. The total amount being credited to the payee's account.
	PmtRemitRefIdent pmtRemitRefIdent;	 //	NC-36	 Optional	 Payment Remittance (Credit) Reference Transaction Identifier.
	PmtLegalRpt pmtLegalRpt;	 //	Aggregate	 Optional	 Payment Legal Reporting. For cross border payments in some foreign countries, it is sometimes mandatory to provide legal reporting information to the foreign central bank. This aggregate contains the information to satisfy the legal reporting requirement for payments to foreign payees. It is the responsibility of the reporting party (payer or payee) to pass the payment legal reporting information to CPP for CPP to forward to Central Bank. This information may be pass from the payer to CPP. CPP may then pass it to the country's central bank. CPPs should not modify the information in this aggregate.Following are some countries in which this aggregate is used: Austria, Belgium, Germany, Denmark, Finland, Japan, Netherlands, Norway, and Sweden.
	
	public RemitRefIdent getRemitRefIdent() {
		return remitRefIdent;
	}
	public void setRemitRefIdent(RemitRefIdent remitRefIdent) {
		this.remitRefIdent = remitRefIdent;
	}
	public PmtRefIdent getPmtRefIdent() {
		return pmtRefIdent;
	}
	public void setPmtRefIdent(PmtRefIdent pmtRefIdent) {
		this.pmtRefIdent = pmtRefIdent;
	}
	public RemitDeliveryRespParty getRemitDeliveryRespParty() {
		return remitDeliveryRespParty;
	}
	public void setRemitDeliveryRespParty(
			RemitDeliveryRespParty remitDeliveryRespParty) {
		this.remitDeliveryRespParty = remitDeliveryRespParty;
	}
	public DeliveryInstruction getDeliveryInstruction() {
		return deliveryInstruction;
	}
	public void setDeliveryInstruction(DeliveryInstruction deliveryInstruction) {
		this.deliveryInstruction = deliveryInstruction;
	}
	public PmtInstruction getPmtInstruction() {
		return pmtInstruction;
	}
	public void setPmtInstruction(PmtInstruction pmtInstruction) {
		this.pmtInstruction = pmtInstruction;
	}
	public ChkData getChkData() {
		return chkData;
	}
	public void setChkData(ChkData chkData) {
		this.chkData = chkData;
	}
	public ChkImageURL getChkImageURL() {
		return chkImageURL;
	}
	public void setChkImageURL(ChkImageURL chkImageURL) {
		this.chkImageURL = chkImageURL;
	}
	public CustPayeeRef getCustPayeeRef() {
		return custPayeeRef;
	}
	public void setCustPayeeRef(CustPayeeRef custPayeeRef) {
		this.custPayeeRef = custPayeeRef;
	}
	public RemitDetail[] getRemitDetail() {
		return remitDetail;
	}
	public void setRemitDetail(RemitDetail[] remitDetail) {
		this.remitDetail = remitDetail;
	}
	public PmtRef getPmtRef() {
		return pmtRef;
	}
	public void setPmtRef(PmtRef pmtRef) {
		this.pmtRef = pmtRef;
	}
	public RefData[] getRefData() {
		return refData;
	}
	public void setRefData(RefData[] refData) {
		this.refData = refData;
	}
	public CurAmt getCurAmt() {
		return curAmt;
	}
	public void setCurAmt(CurAmt curAmt) {
		this.curAmt = curAmt;
	}
	public PmtRemitRefIdent getPmtRemitRefIdent() {
		return pmtRemitRefIdent;
	}
	public void setPmtRemitRefIdent(PmtRemitRefIdent pmtRemitRefIdent) {
		this.pmtRemitRefIdent = pmtRemitRefIdent;
	}
	public PmtLegalRpt getPmtLegalRpt() {
		return pmtLegalRpt;
	}
	public void setPmtLegalRpt(PmtLegalRpt pmtLegalRpt) {
		this.pmtLegalRpt = pmtLegalRpt;
	}
}
